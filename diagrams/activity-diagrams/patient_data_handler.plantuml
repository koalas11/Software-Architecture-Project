@startuml define_therapeutic_plan

!$num = 1

floating note
we assume we can update sensor at anytime
....
<<complexity>>
medium
----
<<frequency>>
gets used by both acquire use cases, so

\#npatient*6/15min at peak
end note

start
fork
:A$num - Process PhysiologicalData; <<acceptEvent>>
note left
This consider data from
sensors and manually sent
end note
:I$num : PhysiologicalData; <<task>>
!$num = $num + 1
fork again
:A$num - Process DailyActivityData; <<acceptEvent>>
:I$num : DailyActivityData; <<task>>
!$num = $num + 1
end fork
:I$num : PatientData; <<task>>
:\t<<buffer>>
I$num.1 : PatientData
\t{1..*}; <<task>>

:\t<<datastore>>\n I$num.2 : Therapeutic Plan\n{1..*}; <<datastore>> <<task>>
:I$num : Therapeutic Plan; <<data>> <<task>>

:\t<<datastore>>\n I$num.3 : Medical Record\n{1..*}; <<datastore>> <<task>>
:I$num : Medical Record; <<data>> <<task>>

fork
:A$num : Verify Thresholds;
if (Is Threshold Exceeded) then (yes)
:I$num : Threshold; <<task>>
!$num = $num + 1
:sendThresholdAlert; <<output>>
else (no)
endif
fork again
:A$num : Verify Anomalies;
if (Is Anomaly Detected) then (yes)
:I$num : Anomaly; <<task>>
:I$num : AnomalyAlert; <<task>>
!$num = $num + 1
:sendIdentifyOnCallPhysician; <<output>>
else (no)
endif
fork again
:A$num : Verify Red codes;
if (Is Red Code Detected) then (yes)
:I$num : RedCodeAlert; <<task>>
!$num = $num + 1
:sendIdentifyHospitalAndAmbulance; <<output>>
else (no)
endif
end fork

stop

@enduml
